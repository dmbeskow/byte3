import dash
from dash.dependencies import Input, Output
import dash_core_components as dcc
import dash_html_components as html
import plotly.graph_objs as go
from pandas_datareader import data as web
import pandas as pd
from datetime import datetime as dt
import datetime as dt
import os
import json
import dateutil

app = dash.Dash(__name__)
application = app.server


def convert_date(series):
    newlist = []
    mylist=series.tolist()
    for element in mylist:
        newlist.append(dateutil.parser.parse(element))
    return(newlist)


def get_files(word = 'activity'):
    f = os.listdir('.')
    files = []
    for file in f:
        if word in file:
            files.append(file)
    return(files)

def generate_table(dataframe, max_rows=10):
    return html.Table(
        # Header
        [html.Tr([html.Th(col) for col in dataframe.columns])] +

        # Body
        [html.Tr([
            html.Td(dataframe.iloc[i][col]) for col in dataframe.columns
        ]) for i in range(min(len(dataframe), max_rows))]
    )
datasets = pd.DataFrame({
    "Data": ['Heart Rate', 'Sleep Data', 'Distance', 'Steps','Floors','Food','Calories'],
    "Description": [
    'Minute time series data to document heart Rate',
    'Minute time series data documents sleep (if asleep, how deep that sleep is.)',
    'Minute time series data for distance traveled',
    'Minute time series data for steps taken',
    'Minute time series data for floors climbed',
    'Summary of daily food intake',
    'Minute time series data for Calories burned'
    ]
})

act = pd.read_csv('activities_total.csv')

markdown_text1 = '''
### About this Data

In lieu of using the AWARE app, I've developed this app using Fitbit data that
documents numerous measurements taken 24 hours a day for the past 10 days.  This data includes data related
to heart rate, sleep activity, excercise, caloric intake, steps taken, floors climbed, and distance traveled.

I accessed the Fitbit data through the Fitbit API.  I used the
[Python Fitbit package](https://pypi.python.org/pypi/fitbit/0.1.3) to facilitate this.  Through this package
I was able to collect the following data sets:

-----

'''

markdown_text2 = '''
## Exploratory Data Analysis

In this app I will explore the data in order to answer questions about my personal health as well as to
evaluate the accuracy of the Fitbit monitoring system.  In general, I will explore my heart rate,
'''

markdown_text3 = '''
-----

The following data sets are available through this

The Fitbit Data was generated by a Fitbit Blaze smartwatch that I wear almost all of the time.  You will note in The
data that there are a few breaks.
'''

markdown_text4 = '''
-----

### Analysis of step dataset

Below I analyze step data.......
'''

"""
algorithm for cleaning and presenting heart rate data
"""
Date = []
time = []
value = []
f = get_files('HR_')
for file in f:
    infile = open(file, 'r')
    temp = json.load(infile)
    d = temp['activities-heart'][0]['dateTime']
    for i in temp['activities-heart-intraday']['dataset']:
        Date.append(d)
        value.append(i['value'])
        time.append(i['time'])


HR_df = pd.DataFrame({'Date':Date,'HR':value,'Time':time})
HR_df['dateTime'] = HR_df['Date'] + ' ' +  HR_df['Time']


HR_df.index = convert_date(HR_df['dateTime'])
HR_df = HR_df.resample('10T').mean()

slp_matrix = pd.read_csv('slp_matrix.csv')
slp_matrix.index = slp_matrix.Date
slp_matrix = slp_matrix.drop(['Date'], axis = 1)

app.layout = html.Div([
    html.Div([
        html.Div([
            dcc.Markdown(children=markdown_text2),
            dcc.Input(
                id='startdate-input',
                type='date',
                value=dt.date.today() - dt.timedelta(days=4)
            ),
            # dcc.Dropdown(
            #     id='my-dropdown',
            #     options=[
            #         {'label': 'Coke', 'value': 'COKE'},
            #         {'label': 'Tesla', 'value': 'TSLA'},
            #         {'label': 'Apple', 'value': 'AAPL'}
            #     ],
            #     value='COKE'
            # ),
            dcc.Graph(id='my-graph'),
            dcc.Markdown(children=markdown_text4),
           dcc.Graph(
                id='heatmap',
                figure = {
                    'data':[
                        go.Heatmap(z = slp_matrix.values.tolist(),
                                    y = list(slp_matrix.index),
                                    x = list(slp_matrix))
                            ],
                    'layout': {
                        'title': 'Heatmap of Sleep Activity'
                        }
                    }
            ),
           dcc.Graph(
                id='example-graph',
                figure={
                    'data': [{
                        'x': HR_df.index,
                        'y': HR_df.HR
                    }],
                    'layout': {
                        'title': 'Average Heart Rate (10 min interval)'
                    }
                }
            ),
            dcc.Markdown(children=markdown_text4),
            generate_table(act),
        ], className="eight columns"),

        html.Div([
            dcc.Markdown(children=markdown_text1),
            generate_table(datasets),
            dcc.Markdown(children=markdown_text3)
        ], className="four columns"),
    ], className="row")
])

app.css.append_css({
    'external_url': 'https://codepen.io/chriddyp/pen/bWLwgP.css'
})

@app.callback(Output('my-graph', 'figure'), [Input('startdate-input', 'value')])
def update_graph(selected_startdate_input):
    Date = []
    time = []
    value = []
    f = get_files('distance')
    for file in f:
        infile = open(file, 'r')
        distance = json.load(infile)
        d = distance['activities-distance'][0]['dateTime']
        for i in distance['activities-distance-intraday']['dataset']:
            Date.append(d)
            value.append(i['value'])
            time.append(i['time'])
    distdf = pd.DataFrame({'Date':Date,'Distance':value,'Time':time})
    distdf['dateTime'] = distdf['Date'] + ' ' +  distdf['Time']
    print(selected_startdate_input)
    cs = distdf[distdf['Date']== selected_startdate_input]
    cs.index = convert_date(cs['dateTime'])
    cs = cs.resample('10T').sum()
    cs = cs.cumsum()
    return {
        'data': [{
            'x': cs.index,
            'y': cs.Distance
        }],
        'layout': {
                'title': 'Cumulative Daily Distance'
            }
    }

# @app.callback(Output('my-graph', 'figure'), [Input('my-dropdown', 'value')])
# def update_graph(selected_dropdown_value):
#     df = web.DataReader(
#         selected_dropdown_value, data_source='google',
#         start=dt(2017, 1, 1), end=dt.now())
#     return {
#         'data': [{
#             'x': df.index,
#             'y': df.Close
#         }]
#     }

if __name__ == '__main__':
    # app.run_server(debug = True)
    application.debug = True
    application.run()
